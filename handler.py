"""Service entry-point."""
import json
import logging

from service.dal import Project
from service.models import JSONManifest, JSONFactory


# Logging setup
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


# Lambda entry
def main(event, context=None):  # pylint: disable=unused-argument
    """Handle loandata as Eventbridge event and return report.

    The reports generated by the service have the following envelope:

    ```json
    {
        "reports": [
            {
                "title": "<the report title>",
                ...
            },
            ...
        ]
    }
    ```

    Parameters
    ----------
    event : dict
        The Eventbridge event payload with loandata for reporting as its detail.
    context : LambdaContext
        The lambda context object (for Lambda use only).

    Returns
    -------
    dict{str:any}
        Returns a dict which contains the reports generated by the service.

    """
    event = {} if event is None else event
    logger.info('Service invoked by event: %s', json.dumps(event, indent=2))

    # Load all rules
    project = Project()

    rules = [rule for _ in project.resources.values() for rule in _]
    #Added new rule for [FTR] CC-02
    rules.append({
        "source": "$.applications[0].shared_address",
        "target": "$.reports[?(@.title == 'Borrowers Report')].shared_address"
    })

    logger.info('Service loaded rules: %s', json.dumps(rules, indent=2))
    # Confirm event is valid EventBridge -> SQS payload
    loans = []
    for record in event.get('Records', [{}]):
        if not all(
            key in record for key in ['source', 'detail-type', 'detail']
        ):
            logger.error(
                'Service received invalid EventBridge event- Skipping event'
            )
            continue

        # Attempt to load loandata
        try:
            loans.append(json.loads(record['detail']))
        except json.JSONDecodeError:
            logger.error(
                'Service received invalid event detail- Skipping event'
            )
            continue

    logger.info('Service received loans: %s', json.dumps(loans, indent=2))

    #added bug fix for CC-03
    applications = loans[0]['applications']
    applications_size = len(applications)
    #load application rules
    application_rules = [rule['source'] for rule in rules]
    #add new rules based on size of applications

    for i in range(applications_size):
        if f"$.applications[{i}].borrower" not in application_rules and f"$.applications[{i}].coborrower" not in application_rules:
            #Add multiple residences in report
            rules.append({'source': f"$.applications[{i}].borrower.mailingAddress.addressStreetLine1",'target':f"$.reports[?(@.title == 'Residences Report')].residences[{2*i}].street"})
            rules.append({'source': f"$.applications[{i}].borrower.mailingAddress.addressState",'target':f"$.reports[?(@.title == 'Residences Report')].residences[{2*i}].state"})
            rules.append({'source': f"$.applications[{i}].borrower.mailingAddress.addressCity",'target':f"$.reports[?(@.title == 'Residences Report')].residences[{2*i}].city"})
            rules.append({'source': f"$.applications[{i}].borrower.mailingAddress.addressPostalCode",'target':f"$.reports[?(@.title == 'Residences Report')].residences[{2*i}].zip"})
            rules.append({'source': f"$.applications[{i}].coborrower.mailingAddress.addressStreetLine1",'target':f"$.reports[?(@.title == 'Residences Report')].residences[{2*i+1}].street"})
            rules.append({'source': f"$.applications[{i}].coborrower.mailingAddress.addressState",'target':f"$.reports[?(@.title == 'Residences Report')].residences[{2*i+1}].state"})
            rules.append({'source': f"$.applications[{i}].coborrower.mailingAddress.addressCity",'target':f"$.reports[?(@.title == 'Residences Report')].residences[{2*i+1}].city"})
            rules.append({'source': f"$.applications[{i}].coborrower.mailingAddress.addressPostalCode",'target':f"$.reports[?(@.title == 'Residences Report')].residences[{2*i+1}].zip"})
            #even index of borrowers list in report are borrowers
            #odd index of borrowers list in report are coborrowers
            #Add multiple borrowers in report
            rules.append({'source':f"$.applications[{i}].borrower.firstName", 'target': f"$.reports[?(@.title == 'Borrowers Report')].borrowers[{2*i}].first_name" })
            rules.append({'source':f"$.applications[{i}].borrower.lastName", 'target': f"$.reports[?(@.title == 'Borrowers Report')].borrowers[{2*i}].last_name" })
            rules.append({'source':f"$.applications[{i}].coborrower.firstName", 'target': f"$.reports[?(@.title == 'Borrowers Report')].borrowers[{2*i+1}].first_name" })
            rules.append({'source':f"$.applications[{i}].coborrower.lastName", 'target': f"$.reports[?(@.title == 'Borrowers Report')].borrowers[{2*i+1}].last_name" })



    # Generate Manifests
    reports = []
    for loan in loans:
        manifest = JSONManifest(loan, rules)
        logger.info(
            'Generated manifest: %s', json.dumps(manifest.items, indent=2)
        )

        projection = JSONFactory(manifest).get_projection()
        logger.info(
            'Generated projection: %s', json.dumps(projection, indent=2)
        )

        reports.extend(projection.get('reports', []))

    # Reformat report output and return
    return {'reports': reports}
